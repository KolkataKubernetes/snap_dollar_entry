library(scales)
library(ellmer)
library(gander)
library(zoo)
# Set data path
file_path <- readLines("2_processed_data/processed_path.txt")[1]
filesave  <- paste(file_path, "/waiver_data_consolidated.csv", sep = "")
waivers   <- read.csv(filesave)
# ---------------------------
# Shared theme + helpers
# ---------------------------
theme_econ <- function(base_size = 14) {
theme_minimal(base_size = base_size) +
theme(
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
axis.title.x = element_text(margin = margin(t = 8)),
axis.title.y = element_text(margin = margin(r = 8)),
plot.title.position = "plot",
legend.position = "top",
legend.title = element_blank()
)
}
# --------------------------------------------------------------------------------
# '''Exploratory Data Analysis - DATA PREP - States with SNAP by year'''
# --------------------------------------------------------------------------------
waivers |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) |>
filter(STATE == 'Virginia')
# --- All loc types ---
waivers |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) |>
transmute(STATE, YEAR_START, YEAR_END) |>
distinct() -> temp
temp |>
rowwise() |>
mutate(YEAR = list(seq.int(YEAR_START, YEAR_END))) |>
ungroup() |>
select(STATE, YEAR) |>
tidyr::unnest(cols = YEAR) |>
distinct(STATE, YEAR) |>
group_by(YEAR) |>
summarise(count = n(), .groups = "drop") |>
arrange(YEAR) -> waiver_year_all
rm(temp)
waivers |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) |>
transmute(STATE, LOC_TYPE, YEAR_START, YEAR_END) |>
distinct() |>
rowwise() |>
mutate(YEAR = list(seq.int(YEAR_START, YEAR_END))) |>
ungroup() |>
transmute(STATE, LOC_TYPE, YEAR) |>
unnest(cols = YEAR) |>
distinct() |> # E.G. Louisiana
# filter(STATE == 'Arizona') |> #'test case' - check Alaska for anothre example
group_by(STATE, YEAR) |>
summarise(count = n()) |>
filter(count > 1) |>
select(STATE) |>
distinct() -> states
states
waivers |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) |>
transmute(STATE, LOC_TYPE, YEAR_START, YEAR_END) |>
distinct() |>
rowwise() |>
mutate(YEAR = list(seq.int(YEAR_START, YEAR_END))) |>
ungroup() |>
transmute(STATE, LOC_TYPE, YEAR) |>
unnest(cols = YEAR) |>
distinct() |> # E.G. Louisiana
filter(STATE == 'New York')
# Load Packages
library(tidyverse)
library(stringr)
library(purrr)
library(scales)
library(ellmer)
library(gander)
library(zoo)
# Set data path
file_path <- readLines("2_processed_data/processed_path.txt")[1]
filesave  <- paste(file_path, "/waiver_data_consolidated.csv", sep = "")
waivers   <- read.csv(filesave)
# ---------------------------
# Shared theme + helpers
# ---------------------------
theme_econ <- function(base_size = 14) {
theme_minimal(base_size = base_size) +
theme(
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
axis.title.x = element_text(margin = margin(t = 8)),
axis.title.y = element_text(margin = margin(r = 8)),
plot.title.position = "plot",
legend.position = "top",
legend.title = element_blank()
)
}
# --------------------------------------------------------------------------------
# '''Exploratory Data Analysis - DATA PREP - States with SNAP by year'''
# --------------------------------------------------------------------------------
waivers |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) |>
filter(STATE == 'Virginia')
# --- All loc types ---
waivers |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) |>
transmute(STATE, YEAR_START, YEAR_END) |>
distinct() -> temp
temp |>
rowwise() |>
mutate(YEAR = list(seq.int(YEAR_START, YEAR_END))) |>
ungroup() |>
select(STATE, YEAR) |>
tidyr::unnest(cols = YEAR) |>
distinct(STATE, YEAR) |>
group_by(YEAR) |>
summarise(count = n(), .groups = "drop") |>
arrange(YEAR) -> waiver_year_all
rm(temp)
# --- Single geographic level ACROSS years ---
# Keep states that NEVER use a multi-level LOC_TYPE (no comma in any year).
waivers |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) |>
transmute(STATE, LOC_TYPE, YEAR_START, YEAR_END) |>
distinct() |>
rowwise() |>
mutate(YEAR = list(seq.int(YEAR_START, YEAR_END))) |>
ungroup() |>
transmute(STATE, LOC_TYPE, YEAR) |>
unnest(cols = YEAR) |>
distinct() |> # E.G. Louisiana
#filter(STATE == 'New York') |> #'test case' - check Alaska for anothre example
group_by(STATE, YEAR) |>
summarise(count = n()) |>
filter(count > 1) |>
select(STATE) |>
distinct() -> states
#TEMP: MOVE TO TEMP EVENTUALLY
## CHANGE CALIFORNIA TO SUPERSET ALL ACTIVE COUNTIES
#Overlaps:
#California is MOSTLY determined by counties - you should
# Mass -throw away because of 'NECTA'
# Minnesota, Montana, Nebraska, New Mexico, Oregon, South Dakota - Might be valid if we consider reservation areas
waivers |> # Keep states that NEVER use a multi-level LOC_TYPE
filter(!(STATE %in% states$STATE)) |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) %>%
transmute(STATE, YEAR = purrr::map2(YEAR_START, YEAR_END, seq.int)) %>%
tidyr::unnest(cols = YEAR) %>%
distinct(STATE, YEAR) %>%
count(YEAR, name = "count") %>%
arrange(YEAR) -> waiver_year_singles
# --------------------------------------------------------------------------------
# '''Exploratory Data Analysis -  State Counts by year - break out by one versus many loc types'''
# --------------------------------------------------------------------------------
ggplot() +
geom_line(data = waiver_year_all,
aes(x = YEAR, y = count, color = "All states (≥1 waiver)"),
linewidth = 1) +
geom_line(data = waiver_year_singles,
aes(x = YEAR, y = count, color = "Single geographic level for each year"),
linewidth = 1) +
scale_color_manual(
name = NULL,
values = c("All states (≥1 waiver)" = "#5B5B5B",
"Single geographic level for each year" = "#2C7FB8"),
breaks = c("All states (≥1 waiver)", "Single geographic level for each year")
) +
scale_x_continuous(expand = expansion(mult = c(0.01, 0.03))) +
scale_y_continuous(labels = label_comma()) +
labs(
title    = "States with SNAP Waivers by Year",
subtitle = "All states with ≥1 waiver vs. states issued at a single geographic level for each year",
x = "Year",
y = "Number of states with active waivers"
) +
theme_econ()
# --------------------------------------------------------------------------------
# '''What Types of Loc Type Combinations/Transitions?'''
# --------------------------------------------------------------------------------
waivers |> # Keep states that NEVER use a multi-level LOC_TYPE
filter(!(STATE %in% states$STATE)) -> waivers_singles
# Retrieve states that "transition" -> Have more than one Loc Type across years
waivers_singles |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) %>%
transmute(STATE, YEAR = purrr::map2(YEAR_START, YEAR_END, seq.int), LOC_TYPE) %>%
tidyr::unnest(cols = YEAR) %>%
transmute(STATE, LOC_TYPE) |>
distinct() |>
group_by(STATE)
waivers_singles |>
transmute(STATE, LOC_TYPE) |>
distinct() |>
group_by(STATE) |>
summarise(LOC_SUMMARY = paste(LOC_TYPE, collapse = ","))
waivers_singles |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) %>%
transmute(STATE, YEAR = purrr::map2(YEAR_START, YEAR_END, seq.int), LOC_TYPE) %>%
tidyr::unnest(cols = YEAR) %>%
transmute(STATE, LOC_TYPE) |>
distinct() |>
group_by(STATE) |>
summarise(count = n()) -> transition_states
waivers_singles |>
transmute(STATE, LOC_TYPE) |>
distinct() |>
group_by(STATE) |>
summarise(LOC_SUMMARY = paste(LOC_TYPE, collapse = ",")) -> transition_types
table(transition_types$LOC_SUMMARY)
waivers_singles |>
transmute(STATE, LOC_TYPE) |>
distinct() |>
group_by(STATE) |>
summarise(LOC_SUMMARY = paste(LOC_TYPE, collapse = ",")) |>
filter(LOC_SUMMARY == 'State,County')
# --------------------------------------------------------------------------------
# Visuals: SNAP Waiver Expansion/Contraction
# Inder Majumdar
# --------------------------------------------------------------------------------
# Load Packages
library(tidyverse)
library(stringr)
library(purrr)
library(scales)
library(ellmer)
library(gander)
library(zoo)
# Set data path
file_path <- readLines("2_processed_data/processed_path.txt")[1]
filesave  <- paste(file_path, "/waiver_data_consolidated.csv", sep = "")
waivers   <- read.csv(filesave)
# ---------------------------
# Shared theme + helpers
# ---------------------------
theme_econ <- function(base_size = 14) {
theme_minimal(base_size = base_size) +
theme(
panel.grid.minor = element_blank(),
panel.grid.major.x = element_blank(),
axis.title.x = element_text(margin = margin(t = 8)),
axis.title.y = element_text(margin = margin(r = 8)),
plot.title.position = "plot",
legend.position = "top",
legend.title = element_blank()
)
}
# --------------------------------------------------------------------------------
# '''Exploratory Data Analysis - DATA PREP - States with SNAP by year'''
# --------------------------------------------------------------------------------
waivers |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) |>
filter(STATE == 'Virginia')
# --- All loc types ---
waivers |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) |>
transmute(STATE, YEAR_START, YEAR_END) |>
distinct() -> temp
temp |>
rowwise() |>
mutate(YEAR = list(seq.int(YEAR_START, YEAR_END))) |>
ungroup() |>
select(STATE, YEAR) |>
tidyr::unnest(cols = YEAR) |>
distinct(STATE, YEAR) |>
group_by(YEAR) |>
summarise(count = n(), .groups = "drop") |>
arrange(YEAR) -> waiver_year_all
rm(temp)
# --- Single geographic level ACROSS years ---
# Keep states that NEVER use a multi-level LOC_TYPE (no comma in any year).
waivers |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) |>
transmute(STATE, LOC_TYPE, YEAR_START, YEAR_END) |>
distinct() |>
rowwise() |>
mutate(YEAR = list(seq.int(YEAR_START, YEAR_END))) |>
ungroup() |>
transmute(STATE, LOC_TYPE, YEAR) |>
unnest(cols = YEAR) |>
distinct() |> # E.G. Louisiana
#filter(STATE == 'New York') |> #'test case' - check Alaska for anothre example
group_by(STATE, YEAR) |>
summarise(count = n()) |>
filter(count > 1) |>
select(STATE) |>
distinct() -> states
#TEMP: MOVE TO TEMP EVENTUALLY
## CHANGE CALIFORNIA TO SUPERSET ALL ACTIVE COUNTIES
#Overlaps:
#California is MOSTLY determined by counties - you should
# Mass -throw away because of 'NECTA'
# Minnesota, Montana, Nebraska, New Mexico, Oregon, South Dakota - Might be valid if we consider reservation areas
waivers |> # Keep states that NEVER use a multi-level LOC_TYPE
filter(!(STATE %in% states$STATE)) |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) %>%
transmute(STATE, YEAR = purrr::map2(YEAR_START, YEAR_END, seq.int)) %>%
tidyr::unnest(cols = YEAR) %>%
distinct(STATE, YEAR) %>%
count(YEAR, name = "count") %>%
arrange(YEAR) -> waiver_year_singles
# --------------------------------------------------------------------------------
# '''Exploratory Data Analysis -  State Counts by year - break out by one versus many loc types'''
# --------------------------------------------------------------------------------
ggplot() +
geom_line(data = waiver_year_all,
aes(x = YEAR, y = count, color = "All states (≥1 waiver)"),
linewidth = 1) +
geom_line(data = waiver_year_singles,
aes(x = YEAR, y = count, color = "Single geographic level for each year"),
linewidth = 1) +
scale_color_manual(
name = NULL,
values = c("All states (≥1 waiver)" = "#5B5B5B",
"Single geographic level for each year" = "#2C7FB8"),
breaks = c("All states (≥1 waiver)", "Single geographic level for each year")
) +
scale_x_continuous(expand = expansion(mult = c(0.01, 0.03))) +
scale_y_continuous(labels = label_comma()) +
labs(
title    = "States with SNAP Waivers by Year",
subtitle = "All states with ≥1 waiver vs. states issued at a single geographic level for each year",
x = "Year",
y = "Number of states with active waivers"
) +
theme_econ()
# --------------------------------------------------------------------------------
# '''What Types of Loc Type Combinations/Transitions?'''
# --------------------------------------------------------------------------------
waivers |> # Keep states that NEVER use a multi-level LOC_TYPE
filter(!(STATE %in% states$STATE)) -> waivers_singles
# Retrieve states that "transition" -> Have more than one Loc Type across years
waivers_singles |>
mutate(
DATE_START = as.Date(DATE_START, format = "%Y-%m-%d"),
DATE_END   = as.Date(DATE_END,   format = "%Y-%m-%d"),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END,   "%Y"))
) %>%
transmute(STATE, YEAR = purrr::map2(YEAR_START, YEAR_END, seq.int), LOC_TYPE) %>%
tidyr::unnest(cols = YEAR) %>%
transmute(STATE, LOC_TYPE) |>
distinct() |>
group_by(STATE) |>
summarise(count = n()) -> transition_states
waivers_singles |>
transmute(STATE, LOC_TYPE) |>
distinct() |>
group_by(STATE) |>
summarise(LOC_SUMMARY = paste(LOC_TYPE, collapse = ",")) -> transition_types
table(transition_types$LOC_SUMMARY)
# --------------------------------------------------------------------------------
# '''Hierarchical Code: Adjusting for State-County Transitions'''
# --------------------------------------------------------------------------------
# For now, let's just consider two types:
## 1) transition_type = County
## 2) State,County
## So the 2) State, County transition will be important for us to break out. Let's start with that.
### Retrieve state list
waivers_singles |>
transmute(STATE, LOC_TYPE) |>
distinct() |>
group_by(STATE) |>
summarise(LOC_SUMMARY = paste(LOC_TYPE, collapse = ",")) |>
filter(LOC_SUMMARY == 'State,County') -> SC_statelist
waivers_singles |>
transmute(STATE, LOC_TYPE) |>
distinct() |>
group_by(STATE) |>
summarise(LOC_SUMMARY = paste(LOC_TYPE, collapse = ",")) |>
filter(LOC_SUMMARY == 'County') -> county_only_qual
waivers_singles |>
filter(STATE %in% SC_statelist$STATE) -> x
# Identify month columns programmatically
mon_cols <- names(x) %>%
purrr::keep(~ str_detect(.x, "^(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)_\\d{4}$"))
# --- Step 1: County universe (from waivers_singles) ---
county_universe <- waivers_singles %>%
filter(LOC_TYPE == "County") %>%
distinct(STATE, COUNTY = LOC)
# --- Step 2: Expand statewide rows into counties ---
expanded_state_counties <- waivers_singles %>%
filter(LOC_TYPE == "State", ENTIRE_STATE == 1) %>%
select(
STATE, STATE_ABBREV, LOC, LOC_TYPE, ENTIRE_STATE,
DATE_START, DATE_END, COMMENT, SOURCE_DOC
) %>%
inner_join(county_universe, by = "STATE") %>%
mutate(
LOC        = COUNTY,
LOC_TYPE   = "County",
ENTIRE_STATE = 0L
) %>%
select(-COUNTY)
# --- Step 3: Combine counties + expanded state-counties ---
final_county_data <- waivers_singles %>%
filter(LOC_TYPE == "County") %>%
bind_rows(expanded_state_counties)
# --- Step 4: Build county-based time series ---
final_county_data %>%
mutate(
DATE_START = as.Date(DATE_START),
DATE_END   = as.Date(DATE_END),
YEAR_START = as.integer(format(DATE_START, "%Y")),
YEAR_END   = as.integer(format(DATE_END, "%Y"))
) %>%
transmute(STATE, LOC, YEAR_START, YEAR_END) %>%
distinct() %>%
rowwise() %>%
mutate(YEAR = list(seq.int(YEAR_START, YEAR_END))) %>%
ungroup() %>%
select(STATE, LOC, YEAR) %>%
tidyr::unnest(cols = YEAR) %>%
distinct(STATE, LOC, YEAR) %>%
count(YEAR, name = "counties_with_waiver") %>%
arrange(YEAR) -> county_waiver_ts
county_waiver_ts
# --------------------------------------------------------------------------------
# '''County Growth - Across US States'''
# --------------------------------------------------------------------------------
ggplot() +
geom_line(data = county_waiver_ts,
aes(x = YEAR, y = counties_with_waiver, color = "Combining State->County AND County only"),
linewidth = 1)
# --------------------------------------------------------------------------------
#
# --------------------------------------------------------------------------------
table(waiver$LOC_TPYE)
table(waiver$LOC_TYPE)
table(waivers$LOC_TYPE)
waivers |>
filter(LOC_TYPE == 'Plantation')
table(waivers$LOC_TYPE)
install.packages('Matrix')
data(USCounties)
library(USCounties)
library(Matrix)
data(USCounties)
data(USCounties, package = "Matrix")
data(USCounties, package = "Matrix")
View(USCounties)
